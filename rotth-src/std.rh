include "./syscalls.rh"
include "./core.rh"

const STDIN: u64 do 0 end
const STDOUT: u64 do 1 end
const STDERR: u64 do 2 end

proc utoa &>u8 u64 : u64 &>char do
    0
    bind buf: &>u8 u: u64 n: u64 do
        u 0 = if
            '0' cast u8 buf !u8
            '\n' cast u8 buf 1 ptr+ cast &>u8 !u8
            2 buf cast &>char return
        end
        n
        u while dup 0 != do
            bind n: u64 u: u64 do
                u 10 mod '0' cast u64 +
                cast u8
                buf n ptr+ cast &>u8 !u8
                n 1 + u 10 div
            end
        end drop
        bind n: u64 do
            n buf rev-slice
            n 1 + buf cast &>char
        end
    end
end

proc rev-slice u64 &>u8 do
    bind n: u64 buf: &>u8 do
        0
        n 1 -
        while over over < do
            bind start: u64 finish: u64 do
                buf start ptr+ cast &>u8 @u8 cast u8
                buf finish ptr+ cast &>u8 @u8 cast u8

                buf start ptr+ cast &>u8 !u8
                buf finish ptr+ cast &>u8 !u8

                start 1 +
                finish 1 -
            end
        end drop drop
    end
end

mem PUTU_BUF do 32 end

proc putu u64 do
    PUTU_BUF swap utoa puts
end

proc eputu u64 do
    PUTU_BUF swap utoa eputs
end

proc puts u64 &>char do
    STDOUT SYS_write syscall3 drop
end

proc eputs u64 &>char do
    STDERR SYS_write syscall3 drop
end

proc cstrlen &>char : u64 do
    cast &>u8
    dup
    while dup @u8 0 cast u8 != do
        1 ptr+
    end cast u64 swap cast u64 absdiff
end

proc absdiff u64 u64 : u64 do
    over over > if -
    else
        swap -
    end
end

mem GETCH_BUF do 1 end

proc getch: char do
   1 GETCH_BUF STDIN SYS_read syscall3 drop
   GETCH_BUF @u8 cast char
end

proc exit u64 do
    SYS_exit syscall1 drop
end

proc div u64 u64 : u64 do
    divmod drop
end

proc mod u64 u64 : u64 do
    divmod swap drop
end

proc and bool bool : bool do
    cast u64 swap cast u64 + 2 =
end

proc not bool : bool do
    if false else true end
end

proc or bool bool : bool do
    cast u64 swap cast u64 + 0 >
end